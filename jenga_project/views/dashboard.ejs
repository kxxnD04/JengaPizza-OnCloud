<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üçï</text></svg>">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <!-- Chart.js for graphs -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <title>Dashboard - Jenga Pizza</title>
    <style>
        @font-face {
            font-family: Prompt;
            src: url("fonts/Prompt-Regular.ttf");
        }

        body {
            font-family: Prompt;
            background-color: #f8f9fa;
        }

        /* Background Image */
        body::before {
            content: "";
            position: fixed;
            width: 100%;
            height: 100%;
            background-image: url("<%= S3_BUCKET_URL %>/images/bg-pizza.jpg");
            opacity: 0.05;
            z-index: -1;
        }

        .dashboard-container {
            padding: 80px 20px 40px 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            font-size: 2rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
            margin-bottom: 30px;
        }

        /* Summary Cards */
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
            margin-bottom: 20px;
            border-left: 4px solid rgb(187, 62, 0);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 16px rgba(187, 62, 0, 0.2);
        }

        .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
            margin: 10px 0;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Top Pizza Card Specific Styles */
        .pizza-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .pizza-icon {
            font-size: 2.5rem;
        }

        .pizza-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 50%;
            border: 3px solid rgb(187, 62, 0);
            box-shadow: 0 2px 8px rgba(187, 62, 0, 0.3);
        }

        .pizza-name {
            font-size: 2rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
            margin: 10px 0;
            line-height: 1.2;
            text-align: left;
        }

        .pizza-stats {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            text-align: left;
        }

        /* Section Cards */
        .section-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 25px;
            height: 100%;
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
            margin-bottom: 20px;
            border-bottom: 2px solid rgb(187, 62, 0);
            padding-bottom: 10px;
        }

        .section-subtitle {
            font-size: 1rem;
            font-weight: bold;
            color: #6c757d;
            margin-top: 20px;
            margin-bottom: 15px;
            padding-left: 10px;
            border-left: 3px solid rgb(187, 62, 0);
        }

        /* Status Badges */
        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: #f8f9fa;
            transition: background 0.3s;
        }

        .status-item:hover {
            background: #e9ecef;
        }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9rem;
        }

        .badge-pending { background: #ffc107; color: #000; }
        .badge-preparing { background: #ff9800; color: #fff; }
        .badge-delivering { background: #ff5722; color: #fff; }
        .badge-success { background: #4caf50; color: #fff; }
        .badge-cancelled { background: #9e9e9e; color: #fff; }
        .badge-rejected { background: #f44336; color: #fff; }

        /* Best Selling Items */
        .best-selling-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: linear-gradient(90deg, #fff 0%, #ffe8e0 100%);
            border-left: 3px solid rgb(187, 62, 0);
        }

        .item-rank {
            font-size: 1.5rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
            min-width: 40px;
        }

        .item-info {
            flex-grow: 1;
            margin-left: 15px;
        }

        .item-name {
            font-weight: bold;
            font-size: 1rem;
        }

        .item-type {
            font-size: 0.8rem;
            color: #6c757d;
        }

        .item-sold {
            font-size: 1.2rem;
            font-weight: bold;
            color: rgb(187, 62, 0);
        }

        /* Low Stock Alert */
        .low-stock-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: #fff3cd;
            border-left: 3px solid #ff9800;
        }

        .stock-name {
            font-weight: 500;
        }

        .stock-quantity {
            font-weight: bold;
            color: #ff5722;
        }

        /* Recent Orders Table */
        .order-table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: rgb(187, 62, 0);
            color: white;
            font-weight: bold;
            font-size: 0.9rem;
        }

        .order-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: #f8f9fa;
            transition: background 0.3s;
        }

        .order-row:hover {
            background: #e9ecef;
        }

        .order-id {
            font-weight: bold;
            color: rgb(187, 62, 0);
            min-width: 100px;
        }

        .order-customer {
            flex-grow: 1;
            margin-left: 15px;
            min-width: 120px;
        }

        .order-price {
            font-weight: bold;
            min-width: 100px;
            text-align: right;
        }

        .order-status {
            min-width: 120px;
            text-align: center;
        }

        .header-id { min-width: 100px; }
        .header-customer { flex-grow: 1; margin-left: 15px; min-width: 120px; }
        .header-price { min-width: 100px; text-align: right; }
        .header-status { min-width: 120px; text-align: center; }

        /* Daily Goal Progress Bar */
        .goal-container {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-top: 15px;
        }

        .goal-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.9rem;
        }

        .goal-label {
            color: #6c757d;
            font-weight: 500;
        }

        .goal-amount {
            font-weight: bold;
            color: rgb(187, 62, 0);
        }

        .progress-bar-container {
            width: 100%;
            height: 25px;
            background: #e9ecef;
            border-radius: 15px;
            overflow: hidden;
            position: relative;
        }

        .progress-bar-fill {
            height: 100%;
            background: linear-gradient(90deg, rgb(187, 62, 0) 0%, rgb(255, 120, 50) 100%);
            transition: width 0.8s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 0.85rem;
        }

        .progress-percentage {
            position: absolute;
            width: 100%;
            text-align: center;
            line-height: 25px;
            font-weight: bold;
            color: #495057;
            z-index: 1;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
        }

        .empty-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        /* Alert */
        .alert-custom {
            border-left: 4px solid #f44336;
            background: #ffebee;
            color: #c62828;
        }

        /* Chart Container */
        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 20px;
        }

        /* Filter inside chart */
        .filter-select {
            padding: 6px 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-family: Prompt;
            background: white;
            cursor: pointer;
            transition: border-color 0.3s;
            font-size: 0.9rem;
        }

        .filter-select:focus {
            outline: none;
            border-color: rgb(187, 62, 0);
        }

        .refresh-btn {
            background: rgb(187, 62, 0);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.2s;
            font-size: 1.1rem;
        }

        .refresh-btn:hover {
            background: rgb(160, 50, 0);
        }

        .refresh-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Goal Setting */
        .goal-setting {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .goal-input {
            width: 150px;
            padding: 8px 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-family: Prompt;
            font-weight: bold;
            color: rgb(187, 62, 0);
        }

        .goal-input:focus {
            outline: none;
            border-color: rgb(187, 62, 0);
        }

        .btn-save-goal {
            background: rgb(187, 62, 0);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s;
        }

        .btn-save-goal:hover {
            background: rgb(160, 50, 0);
        }



        @media (max-width: 768px) {
            .stat-card {
                margin-bottom: 15px;
            }
            
            .order-row {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .order-customer, .order-price, .order-status {
                margin-left: 0;
                margin-top: 5px;
                width: 100%;
            }
        }
    </style>
</head>
<body>

    <header>
        <%- include('header') %>
    </header>

    <div class="dashboard-container">
        <h1 class="page-title">üìä Dashboard</h1>

        <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-custom" role="alert">
                <strong>‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> <%= error %>
            </div>
        <% } %>

        <!-- Summary Statistics Cards -->
        <div class="row">
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon">üì¶</div>
                    <div class="stat-value"><%= stats.totalOrders %></div>
                    <div class="stat-label">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-value">‡∏ø<%= stats.totalRevenue.toLocaleString() %></div>
                    <div class="stat-label">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon">üë•</div>
                    <div class="stat-value"><%= stats.totalCustomers %></div>
                    <div class="stat-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <% if (stats.topPizza) { %>
                        <% 
                        // Calculate pizza image based on ID
                        let pizzaImageId;
                        if (stats.topPizza.pizza_id <= 9) {
                            pizzaImageId = stats.topPizza.pizza_id;
                        } else {
                            pizzaImageId = (stats.topPizza.pizza_id % 6) + 4;
                        }
                        %>
                        <div class="pizza-header">
                            <div class="pizza-icon">üçï</div>
                            <img src="<%= S3_BUCKET_URL %>/images/pizza<%= pizzaImageId %>.png" alt="<%= stats.topPizza.pizza_name %>" class="pizza-image">
                        </div>
                        <div class="pizza-name"><%= stats.topPizza.pizza_name %></div>
                        <div class="pizza-stats">
                            <%= stats.topPizza.total_sold %> ‡∏ä‡∏¥‡πâ‡∏ô ‚Ä¢ ‡∏ø<%= stats.topPizza.total_revenue.toLocaleString() %>
                        </div>
                    <% } else { %>
                        <div class="stat-icon">üçï</div>
                        <div class="stat-value" style="font-size: 1.5rem;">-</div>
                        <div class="stat-label">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Today's Revenue & Goal Card (Full Width) -->
        <div class="row">
            <div class="col-12">
                <div class="stat-card" style="background: linear-gradient(135deg, #fff 0%, #fffaf7 100%); border-left: 4px solid rgb(255, 120, 50);">
                    <div class="row align-items-center">
                        <div class="col-lg-3 col-md-6 mb-3 mb-lg-0">
                            <div style="text-align: center;">
                                <div class="stat-icon" style="margin-bottom: 5px;">üìÖ</div>
                                <div class="stat-value" style="font-size: 1.8rem; margin: 5px 0;">‡∏ø<span id="todayRevenue"><%= stats.todayRevenue.toLocaleString() %></span></div>
                                <div class="stat-label">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                            </div>
                        </div>
                        <div class="col-lg-9 col-md-6">
                            <div style="padding-left: 20px; border-left: 2px solid #ffe8e0;">
                                <div class="goal-setting" style="margin-bottom: 10px;">
                                    <span class="goal-label">üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</span>
                                    <input type="number" id="dailyGoalInput" class="goal-input" value="<%= stats.dailyGoal %>" min="0" step="100" style="width: 120px;">
                                    <span style="color: #6c757d; font-size: 0.9rem;">‡∏ö‡∏≤‡∏ó</span>
                                    <button class="btn-save-goal" onclick="saveDailyGoal()" style="padding: 6px 12px; font-size: 0.9rem;">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                                </div>
                                <div class="goal-header" style="margin-bottom: 8px; font-size: 0.85rem;">
                                    <span class="goal-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
                                    <span class="goal-amount">‡∏ø<span id="todayRevenueProgress"><%= stats.todayRevenue.toLocaleString() %></span> / ‡∏ø<span id="dailyGoalDisplay"><%= stats.dailyGoal.toLocaleString() %></span></span>
                                </div>
                                <div class="progress-bar-container">
                                    <% 
                                    const percentage = Math.min((stats.todayRevenue / stats.dailyGoal) * 100, 100);
                                    %>
                                    <div class="progress-bar-fill" id="progressBarFill" style="width: <%= percentage %>%;">
                                        <% if (percentage > 15) { %>
                                            <span id="progressPercentage"><%= percentage.toFixed(0) %>%</span>
                                        <% } %>
                                    </div>
                                    <% if (percentage <= 15) { %>
                                        <div class="progress-percentage" id="progressPercentageAlt"><%= percentage.toFixed(0) %>%</div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row">
            <!-- Sales Chart with Filter -->
            <div class="col-lg-8 mb-4">
                <div class="section-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3 class="section-title" style="margin-bottom: 0; border: none; padding-bottom: 0;">üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h3>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <select id="dateRange" class="filter-select">
                                <option value="week" selected>7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                                <option value="month">30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                                <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                            </select>
                            <button class="refresh-btn" id="refreshBtn" onclick="manualRefresh()" style="padding: 6px 15px; font-size: 0.9rem;">
                                üîÑ
                            </button>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="salesChart"></canvas>
                    </div>
                    <div style="text-align: center; margin-top: 10px; font-size: 0.85rem; color: #6c757d;">
                        <span id="refreshTimer">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                    </div>
                </div>
            </div>

            <!-- Top 5 Pizza Pie Chart -->
            <div class="col-lg-4 mb-4">
                <div class="section-card">
                    <h3 class="section-title">üçï Top 5 ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ</h3>
                    <div class="chart-container">
                        <canvas id="pizzaPieChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Order Status Breakdown -->
            <div class="col-lg-6 mb-4">
                <div class="section-card">
                    <h3 class="section-title">üìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
                    <% if (statusBreakdown.length > 0) { %>
                        <% 
                        const statusLabels = {
                            pending: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
                            preparing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
                            delivering: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
                            success: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                            cancelled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
                            rejected: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß'
                        };
                        %>
                        <% statusBreakdown.forEach(function(status) { %>
                            <div class="status-item">
                                <span><%= statusLabels[status.order_status] || status.order_status %></span>
                                <span class="status-badge badge-<%= status.order_status %>"><%= status.count %> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state">
                            <div class="empty-icon">üì≠</div>
                            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Best Selling Items -->
            <div class="col-lg-6 mb-4">
                <div class="section-card">
                    <h3 class="section-title">üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ TOP 5</h3>
                    <% if (bestSelling.length > 0) { %>
                        <% bestSelling.forEach(function(item, index) { %>
                            <div class="best-selling-item">
                                <div class="item-rank">#<%= index + 1 %></div>
                                <div class="item-info">
                                    <div class="item-name"><%= item.item_name %></div>
                                    <div class="item-type"><%= item.item_type === 'pizza' ? 'üçï ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤' : 'ü•§ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á' %></div>
                                </div>
                                <div class="item-sold"><%= item.total_sold %> ‡∏ä‡∏¥‡πâ‡∏ô</div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state">
                            <div class="empty-icon">üìä</div>
                            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Low Stock Alert -->
            <div class="col-lg-6 mb-4">
                <div class="section-card">
                    <h3 class="section-title">‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î</h3>
                    
                    <!-- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö TOP 3 -->
                    <h4 class="section-subtitle">ü•´ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h4>
                    <% if (lowStockIngredients.length > 0) { %>
                        <% lowStockIngredients.forEach(function(item) { %>
                            <div class="low-stock-item">
                                <div class="stock-name">
                                    <%= item.thai_name || item.ingredient_name %>
                                </div>
                                <div class="stock-quantity">
                                    ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ <%= item.stock_quantity %> <%= item.unit %>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state" style="padding: 20px;">
                            <p style="margin: 0; font-size: 0.9rem;">‚úÖ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                        </div>
                    <% } %>

                    <!-- ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ TOP 3 -->
                    <h4 class="section-subtitle">üßÉ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</h4>
                    <% if (lowStockEtc.length > 0) { %>
                        <% lowStockEtc.forEach(function(item) { %>
                            <div class="low-stock-item">
                                <div class="stock-name">
                                    <%= item.etc_name %>
                                </div>
                                <div class="stock-quantity">
                                    ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ <%= item.stock_quantity %> <%= item.unit %>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state" style="padding: 20px;">
                            <p style="margin: 0; font-size: 0.9rem;">‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Recent Orders -->
            <div class="col-lg-6 mb-4">
                <div class="section-card">
                    <h3 class="section-title">üïê ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
                    <% if (recentOrders.length > 0) { %>
                        <!-- Table Header -->
                        <div class="order-table-header">
                            <div class="header-id">Order ID</div>
                            <div class="header-customer">‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>
                            <div class="header-price">‡∏£‡∏≤‡∏Ñ‡∏≤</div>
                            <div class="header-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</div>
                        </div>
                        
                        <!-- Table Rows -->
                        <% recentOrders.forEach(function(order) { %>
                            <div class="order-row">
                                <div class="order-id">#<%= order.order_id %></div>
                                <div class="order-customer"><%= order.username %></div>
                                <div class="order-price">‡∏ø<%= order.total_price.toLocaleString() %></div>
                                <div class="order-status">
                                    <span class="status-badge badge-<%= order.order_status %>">
                                        <%= order.order_status %>
                                    </span>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state">
                            <div class="empty-icon">üì≠</div>
                            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

    </div>

    <footer>
        <%- include('footer') %>
    </footer>

    <script>
        let salesLineChart, pizzaPieChart;
        let refreshInterval;
        let refreshCountdown = 30;

        // Initialize charts on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            startAutoRefresh();
            
            // Add event listener for date range filter
            const dateRangeSelect = document.getElementById('dateRange');
            if (dateRangeSelect) {
                dateRangeSelect.addEventListener('change', function() {
                    updateDashboard();
                });
            }
        });

        // Initialize Sales Chart (7 Days)
        function initializeCharts() {
            // Sales Line Chart
            const salesCtx = document.getElementById('salesChart');
            if (salesCtx) {
                salesLineChart = new Chart(salesCtx, {
                    type: 'line',
                    data: {
                        labels: [
                            <% salesLast7Days.labels.forEach(function(label, index) { %>
                                '<%= label %>'<%= index < salesLast7Days.labels.length - 1 ? ',' : '' %>
                            <% }); %>
                        ],
                        datasets: [{
                            label: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)',
                            data: [
                                <% salesLast7Days.data.forEach(function(value, index) { %>
                                    <%= value %><%= index < salesLast7Days.data.length - 1 ? ',' : '' %>
                                <% }); %>
                            ],
                            borderColor: 'rgb(187, 62, 0)',
                            backgroundColor: 'rgba(187, 62, 0, 0.1)',
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: 'rgb(187, 62, 0)',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                labels: {
                                    font: { family: 'Prompt' }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: ‡∏ø' + context.parsed.y.toLocaleString();
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '‡∏ø' + value.toLocaleString();
                                    },
                                    font: { family: 'Prompt' }
                                }
                            },
                            x: {
                                ticks: {
                                    font: { family: 'Prompt' }
                                }
                            }
                        }
                    }
                });
            }

            // Top 5 Pizza Chart (Pizza only - from dedicated query)
            const pizzaCtx = document.getElementById('pizzaPieChart');
            if (pizzaCtx) {
                <% if (bestSellingPizza && bestSellingPizza.length > 0) { %>
                const pizzaData = {
                    labels: [
                        <% bestSellingPizza.forEach(function(item, index) { %>
                            '<%= item.item_name %>'<%= index < bestSellingPizza.length - 1 ? ',' : '' %>
                        <% }); %>
                    ],
                    datasets: [{
                        data: [
                            <% bestSellingPizza.forEach(function(item, index) { %>
                                <%= item.total_sold %><%= index < bestSellingPizza.length - 1 ? ',' : '' %>
                            <% }); %>
                        ],
                        backgroundColor: [
                            'rgb(187, 62, 0)',
                            'rgb(220, 80, 20)',
                            'rgb(255, 120, 50)',
                            'rgb(255, 160, 100)',
                            'rgb(255, 200, 150)'
                        ]
                    }]
                };
                <% } else { %>
                const pizzaData = {
                    labels: ['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e9ecef']
                    }]
                };
                <% } %>

                pizzaPieChart = new Chart(pizzaCtx, {
                    type: 'doughnut',
                    data: pizzaData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    font: { family: 'Prompt', size: 11 },
                                    padding: 10
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return context.label + ': ' + context.parsed + ' ‡∏ä‡∏¥‡πâ‡∏ô';
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }

        // Auto Refresh Function
        let countdownInterval;
        function startAutoRefresh() {
            // Clear previous countdown if exists
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            
            refreshCountdown = 30;
            document.getElementById('refreshTimer').textContent = `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô ${refreshCountdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
            
            // Update countdown display
            countdownInterval = setInterval(() => {
                refreshCountdown--;
                
                if (refreshCountdown > 0) {
                    document.getElementById('refreshTimer').textContent = `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô ${refreshCountdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
                } else {
                    clearInterval(countdownInterval);
                    updateDashboard();
                }
            }, 1000);
        }

        // Manual Refresh
        function manualRefresh() {
            const btn = document.getElementById('refreshBtn');
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
            
            // Clear auto-refresh and restart
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            
            updateDashboard();
        }

        // Update Dashboard Data
        function updateDashboard() {
            const dateRange = document.getElementById('dateRange').value;
            
            // Show loading state
            const refreshBtn = document.getElementById('refreshBtn');
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
            
            // Fetch new data from API
            fetch(`/dashboard/data?range=${dateRange}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update Sales Chart
                        if (salesLineChart && data.salesChart && data.salesChart.labels && data.salesChart.data) {
                            // Check if data is valid
                            if (data.salesChart.labels.length > 0) {
                                salesLineChart.data.labels = data.salesChart.labels;
                                salesLineChart.data.datasets[0].data = data.salesChart.data;
                                salesLineChart.update();
                            } else {
                                // No data - show empty state
                                salesLineChart.data.labels = ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'];
                                salesLineChart.data.datasets[0].data = [0];
                                salesLineChart.update();
                            }
                        }

                        // Update Today's Revenue in both places
                        if (data.todayRevenue !== undefined) {
                            // Update in Total Revenue Card
                            const todayRevenueEl = document.getElementById('todayRevenue');
                            if (todayRevenueEl) {
                                todayRevenueEl.textContent = data.todayRevenue.toLocaleString();
                            }
                            
                            // Update in Progress Bar
                            const todayRevenueProgressEl = document.getElementById('todayRevenueProgress');
                            if (todayRevenueProgressEl) {
                                todayRevenueProgressEl.textContent = data.todayRevenue.toLocaleString();
                            }
                        }
                    } else {
                        console.error('Error fetching dashboard data:', data.message);
                        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                })
                .finally(() => {
                    // Restore button state and restart countdown
                    refreshBtn.disabled = false;
                    refreshBtn.innerHTML = 'üîÑ';
                    startAutoRefresh();
                });
        }

        // Save Daily Goal and Update Progress Bar
        function saveDailyGoal() {
            const goalValue = document.getElementById('dailyGoalInput').value;
            
            if (!goalValue || goalValue < 0) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return;
            }

            fetch('/dashboard/set-goal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ dailyGoal: parseInt(goalValue) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update goal display
                    document.getElementById('dailyGoalDisplay').textContent = parseInt(goalValue).toLocaleString();
                    
                    // Fetch today's revenue to recalculate progress
                    fetch('/dashboard/data?range=week')
                        .then(res => res.json())
                        .then(todayData => {
                            if (todayData.success && todayData.todayRevenue !== undefined) {
                                const todayRevenue = todayData.todayRevenue;
                                const newGoal = parseInt(goalValue);
                                const newPercentage = Math.min((todayRevenue / newGoal) * 100, 100).toFixed(0);
                                
                                // Update revenue display in Total Revenue Card
                                const todayRevenueEl = document.getElementById('todayRevenue');
                                if (todayRevenueEl) {
                                    todayRevenueEl.textContent = todayRevenue.toLocaleString();
                                }
                                
                                // Update revenue display in Progress Bar
                                const todayRevenueProgressEl = document.getElementById('todayRevenueProgress');
                                if (todayRevenueProgressEl) {
                                    todayRevenueProgressEl.textContent = todayRevenue.toLocaleString();
                                }
                                
                                // Update progress bar
                                const progressBar = document.getElementById('progressBarFill');
                                if (progressBar) {
                                    progressBar.style.width = newPercentage + '%';
                                }
                                
                                const percentageText = document.getElementById('progressPercentage');
                                const percentageAlt = document.getElementById('progressPercentageAlt');
                                
                                if (newPercentage > 15) {
                                    if (percentageText) percentageText.textContent = newPercentage + '%';
                                    if (percentageAlt) percentageAlt.style.display = 'none';
                                } else {
                                    if (percentageText) percentageText.textContent = '';
                                    if (percentageAlt) {
                                        percentageAlt.textContent = newPercentage + '%';
                                        percentageAlt.style.display = 'block';
                                    }
                                }
                                
                                alert('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                            }
                        });
                } else {
                    alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
            });
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
        });
    </script>

</body>
</html>
