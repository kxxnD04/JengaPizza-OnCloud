<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üçï</text></svg>">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <title>Jenga Pizza</title>
    <style>
        @font-face {
            font-family: Prompt;
            src: url("fonts/Prompt-Regular.ttf");
        }

        body {
            font-family: Prompt;
        }

        /* Background Image */
        body::before {
            content: "";
            position: fixed;
            width: 100%;
            height: 100%;
            background-image: url("<%= S3_BUCKET_URL %>/images/bg-pizza.jpg");
            opacity: 0.1;
            z-index: -1;
        }

        .box {
            text-align: center;
            width: 100%;
        }

        /* Fix Flexbox Centering */
        .container-center {
            margin: auto;
            display: flex;
            align-items: center;  /* Ensure vertical centering */
            width: 80%;
            min-height: calc(100vh - 60px); /* Adjust for navbar */
            padding-top: 60px; /* Prevent overlap with navbar */
        }

        .category {
            padding: 10px;
            margin-top: 20px;
            margin-bottom: 20px;
            cursor: pointer;
            border-radius: 0%;
        }

        .category.active {
            color: rgb(187,62,0);
            border-bottom: 1px solid rgb(187,62,0);
        }

        .card {
            background-color: rgb(245, 245, 245);
            border: none;
            transition: transform 0.2s;
            cursor: pointer;
            align-items: center;
            text-align: center;
            margin: 10px;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .card a {
            text-decoration: none;
        }

        .card img {
            width: 200px;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
        }

        /* CSS for .show class to display elements */
        .show {
            display: block !important;
        }

        .filterDiv {
            display: none; /* Hide all by default */
        }

        .btn-red {
            background-color: rgb(187, 62, 0);
            color: white;
        }

        .btn-red:hover {
            background-color: rgb(160, 50, 0);
            color: white;
        }

        #stock-modal {
            position: fixed; /* Sit on top of the page content */
            display: none; /* Hidden by default */
            width: 100%; /* Full width (cover the whole page) */
            height: 100%; /* Full height (cover the whole page) */
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5); /* Black background with opacity */
            z-index: 2; /* Specify a stack order in case you're using a different order for other elements */
            cursor: pointer; /* Add a pointer on hover */
        }

        #text{
            position: absolute;
            background-color: white;
            justify-content: center;
            padding: 20px;
            width: 300px;
            top: 50%;
            left: 50%;
            font-size: 50px;
            color: white;
            transform: translate(-50%,-50%);
            -ms-transform: translate(-50%,-50%);
        }

        .quantity-field {
            font-size: 16px;
            width: 70px;
            text-align: center;
        }

        .btn-minus, .btn-plus {
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
        }

        .btn-minus svg {
            color: grey;
            width: 30px;
            height: 30px;
            display: block;
        }

        .btn-plus svg {
            color: grey;
            width: 30px;
            height: 30px;
            display: block;
        }

        input[type="number"] {
            width: 100%;
            height: 45px;
            appearance: none;
            padding-right: 0;
            border: 2px solid grey;
            border-radius: 5px;
        }

        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .price-info {
            font-size: 0.9rem;
            color: #444;
        }
    </style>
</head>
<body>

    <header>
        <%- include('header') %>
    </header>

    <!-- choose to buy -->
    <div class="container-center">
        <div class="box mb-3">
            <div class="row d-flex justify-content-center text-center" id="filterButton">
                <div class="category btn active" onclick="filterSelection('ingredient')">‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
                <div class="category btn" onclick="filterSelection('etc')">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</div>
            </div>
            <div class="row">
                <% if(typeof ingredient !== 'undefined') { %>
                    <% for(var i = 0; i < ingredient.length; i++) { %>
                    <div class="filterDiv ingredient col-md-4">
                        <div class="card p-3">
                            <a href=""><img src="<%= S3_BUCKET_URL %>/images/<%= ingredient[i].ingredient_name %>.png" alt="<%= ingredient[i].thai_name %>"></a>
                            <p><%= ingredient[i].thai_name %></p>
                            <p>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <%= ingredient[i].stock_quantity %> <%= ingredient[i].unit %></p>
                            <button type="button" class="btn btn-red" onclick="on(this)" 
                                   data-id="<%= ingredient[i].ingredient_id %>" 
                                   data-name="<%= ingredient[i].thai_name %>"
                                   data-stock="<%= ingredient[i].stock_quantity %>"
                                   data-unit="<%= ingredient[i].unit %>"
                                   data-type="ingredient">
                                <b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á</b>
                            </button>
                        </div>
                    </div>
                    <% } %>
                <% } %>
                
                <% if(typeof etc !== 'undefined') { %>
                    <% for(var i = 0; i < etc.length; i++) { %>
                    <div class="filterDiv etc col-md-4">
                        <div class="card p-3">
                            <a href=""><img src="<%= S3_BUCKET_URL %>/images/etc<%= etc[i].etc_id %>.png" alt="<%= etc[i].etc_name %>"></a>
                            <p><%= etc[i].etc_name %></p>
                            <p>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <%= etc[i].stock_quantity %></p>
                            <!-- <p class="price-info">‡∏£‡∏≤‡∏Ñ‡∏≤: <%= etc[i].price %> ‡∏ö‡∏≤‡∏ó</p> -->
                            <button type="button" class="btn btn-red" onclick="on(this)" 
                                   data-id="<%= etc[i].etc_id %>" 
                                   data-name="<%= etc[i].etc_name %>"
                                   data-stock="<%= etc[i].stock_quantity %>"
                                   data-price="<%= etc[i].price %>"
                                   data-type="etc">
                                <b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á</b>
                            </button>
                        </div>
                    </div>
                    <% } %>
                <% } else { %>
                    <!-- Fallback static data if no database connection -->
                    <div class="filterDiv etc col-md-4">
                        <div class="card p-3">
                            <a href=""><img src="<%= S3_BUCKET_URL %>/images/pizza.png" alt="‡πÅ‡∏Æ‡∏ä‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡πå"></a>
                            <p>‡πÅ‡∏Æ‡∏ä‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡πå</p>
                            <p>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 300</p>
                            <button type="button" class="btn btn-red" onclick="on(this)"><b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á</b></button>
                        </div>
                    </div>
                    
                    <div class="filterDiv etc col-md-4">
                        <div class="card p-3">
                            <a href=""><img src="<%= S3_BUCKET_URL %>/images/pizza.png" alt="‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î"></a>
                            <p>‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î</p>
                            <p>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 300</p>
                            <button type="button" class="btn btn-red" onclick="on(this)"><b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á</b></button>
                        </div>
                    </div>

                    <div class="filterDiv etc col-md-4">
                        <div class="card p-3">
                            <a href=""><img src="<%= S3_BUCKET_URL %>/images/pizza.png" alt="‡∏•‡∏≤‡∏ã‡∏≤‡∏ô‡∏ç‡πà‡∏≤"></a>
                            <p>‡∏•‡∏≤‡∏ã‡∏≤‡∏ô‡∏ç‡πà‡∏≤</p>
                            <p>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 300</p>
                            <button type="button" class="btn btn-red" onclick="on(this)"><b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á</b></button>
                        </div>
                    </div>
                <% } %>
            </div>
            
            <div id="stock-modal">
                <div id="text">
                    <p style="color: black; font-size: large;"><b>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <span id="modal-stock">300</span> <span id="modal-unit"></span></b></p>
                    <!-- <p id="modal-price" style="color: black; font-size: small; display: none;"><b>‡∏£‡∏≤‡∏Ñ‡∏≤: <span>0</span> ‡∏ö‡∏≤‡∏ó</b></p> -->
                    <div class="quantity-wrapper d-flex mb-3" style="justify-content: center;">
                        <div class="quantity-group-append">
                            <button type="button" class="btn btn-minus add-quantity d-flex align-items-center justify-content-center" data-field="quantity">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                </svg>
                            </button>
                        </div>
                        <input type="number" step="1" max="" value="1" maxlength="4" size="4" name="quantity" class="quantity-field" id="quantity-input">
                        <div class="quantity-group-append">
                            <button type="button" class="btn btn-plus add-quantity d-flex align-items-center justify-content-center" data-field="quantity">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div class="button-wrapper d-flex" style="justify-content: center;">
                        <button class="btn btn-red m-2" type="submit" onclick="updateStock('decrease')">‡∏•‡∏î</button>
                        <button class="btn btn-success m-2" type="submit" onclick="updateStock('increase')">‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
                    </div>
                    <form id="update-form" action="/update-stock" method="POST" style="display: none;">
                        <input type="hidden" name="ingredient_id" id="ingredient-id">
                        <input type="hidden" name="etc_id" id="etc-id">
                        <input type="hidden" name="quantity" id="update-quantity">
                        <input type="hidden" name="operation" id="update-operation">
                        <input type="hidden" name="current_stock" id="current-stock">
                    </form>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <%- include('footer') %>
    </footer>

    <script>
        // check which tab to display when redirect to the page
        document.addEventListener('DOMContentLoaded', function() {
            // Check if there's a tab parameter in the URL
            const urlParams = new URLSearchParams(window.location.search);
            const tabParam = urlParams.get('tab');
            
            // Set the active tab based on the parameter
            if (tabParam === 'etc') {
                // Switch to etc tab
                filterSelection('etc');
                
                // Update the active class
                var current = document.getElementsByClassName("active");
                if (current.length > 0) {
                current[0].classList.remove("active");
                }
                document.querySelector('.category[onclick="filterSelection(\'etc\')"]').classList.add("active");
            } else {
                // Default to ingredient tab
                filterSelection('ingredient');
            }
        });
        
        filterSelection("ingredient")
        function filterSelection(c) {
          var x, i;
          x = document.getElementsByClassName("filterDiv");
          for (i = 0; i < x.length; i++) {
            RemoveClass(x[i], "show");
            if (x[i].className.indexOf(c) > -1) AddClass(x[i], "show");
          }
        }
        
        function AddClass(element, name) {
          var i, arr1, arr2;
          arr1 = element.className.split(" ");
          arr2 = name.split(" ");
          for (i = 0; i < arr2.length; i++) {
            if (arr1.indexOf(arr2[i]) == -1) {element.className += " " + arr2[i];}
          }
        }
        
        function RemoveClass(element, name) {
          var i, arr1, arr2;
          arr1 = element.className.split(" ");
          arr2 = name.split(" ");
          for (i = 0; i < arr2.length; i++) {
            while (arr1.indexOf(arr2[i]) > -1) {
              arr1.splice(arr1.indexOf(arr2[i]), 1);     
            }
          }
          element.className = arr1.join(" ");
        }
        
        // Add active class to the current button (highlight it)
        var filterButton = document.getElementById("filterButton");
        var category = filterButton.getElementsByClassName("category");
        for (var i = 0; i < category.length; i++) {
            category[i].addEventListener("click", function(){
                var current = document.getElementsByClassName("active");
                if (current.length > 0) {
                    current[0].classList.remove("active");
                }
                this.classList.add("active");
            });
        }

        function on(element) {
            let card = element.closest(".card");
            let itemType = element.dataset.type || '';
            let itemId = element.dataset.id || '';
            let stockText = card.querySelectorAll("p")[1];
            let stockAmount = 0;
            let unit = '';
            let price = '';
            
            // Reset the form
            document.getElementById("ingredient-id").value = '';
            document.getElementById("etc-id").value = '';
            
            // Check if we're using database data (with data attributes) or static data
            if (element.dataset.stock) {
                stockAmount = parseInt(element.dataset.stock);
                unit = element.dataset.unit || '';
                price = element.dataset.price || '';
            } else {
                // Extract from the text for static data
                stockAmount = parseInt(stockText.innerText.match(/\d+/)[0]);
            }

            // Update modal with current stock information
            document.getElementById("modal-stock").innerText = stockAmount;
            document.getElementById("modal-unit").innerText = unit;
            
            // Handle price display for etc items
            // let priceElement = document.getElementById("modal-price");
            // if (price && itemType === 'etc') {
            //     priceElement.querySelector("span").innerText = price;
            //     priceElement.style.display = "block";
            // } else {
            //     priceElement.style.display = "none";
            // }
            
            // Set default quantity to 1
            let inputField = document.querySelector(".quantity-field");
            inputField.value = 1;

            // Store data for form submission based on item type
            if (itemType === 'etc') {
                document.getElementById("etc-id").value = itemId;
            } else {
                document.getElementById("ingredient-id").value = itemId;
            }
            
            document.getElementById("current-stock").value = stockAmount;
            
            // Store references for updating UI
            document.getElementById("stock-modal").setAttribute("data-stock", stockAmount);
            document.getElementById("stock-modal").setAttribute("data-card", JSON.stringify(card.innerHTML));
            document.getElementById("stock-modal").setAttribute("data-unit", unit);
            document.getElementById("stock-modal").setAttribute("data-type", itemType);

            // Show modal
            document.getElementById("stock-modal").style.display = "block";
            
            // Add event listener for closing modal when clicking outside
            document.getElementById("stock-modal").addEventListener("click", closeModalOutside);
        }
    
        // Add function to close modal when clicking outside
        function closeModalOutside(event) {
            let modal = document.getElementById("stock-modal");
            let textDiv = document.getElementById("text");
            
            // If the click is on the modal background (not the content)
            if (event.target === modal) {
                modal.style.display = "none";
                // Remove the event listener to prevent memory leaks
                modal.removeEventListener("click", closeModalOutside);
            }
        }

        function updateStock(operation) {
            let modal = document.getElementById("stock-modal");
            let stockAmount = parseInt(modal.getAttribute("data-stock")); 
            let unit = modal.getAttribute("data-unit") || '';
            let itemType = modal.getAttribute("data-type") || '';
            let inputField = document.querySelector(".quantity-field");
            let changeAmount = parseInt(inputField.value);
            let ingredientId = document.getElementById("ingredient-id").value;
            let etcId = document.getElementById("etc-id").value;
            
            // Determine if we're handling an ingredient or etc item
            let hasId = ingredientId || etcId;

            if (isNaN(changeAmount) || changeAmount <= 0) return;

            let newStock = operation === "increase" ? stockAmount + changeAmount : stockAmount - changeAmount;
            
            // Prevent negative stock
            if (newStock < 0) {
                alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
                return;
            }

            // If we have an item ID (from database), submit form
            if (hasId) {
                document.getElementById("update-quantity").value = changeAmount;
                document.getElementById("update-operation").value = operation;
                
                // For frontend validation before submission
                if (operation === 'decrease') {
                    let currentStockInput = document.getElementById("current-stock");
                    // Double-check that we're not trying to remove more than available
                    if (parseInt(currentStockInput.value) < changeAmount) {
                        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
                        return;
                    }
                }
                
                document.getElementById("update-form").submit();
                return;
            }

            // Otherwise, update UI directly (for static data)
            // Get the product name from modal's stored card
            let cardHTML = modal.getAttribute("data-card");
            let tempDiv = document.createElement("div");
            tempDiv.innerHTML = cardHTML;
            let productName = tempDiv.querySelector("p").innerText;

            // Find the matching card by product name and update stock
            let cards = document.getElementsByClassName("card");
            for (let i = 0; i < cards.length; i++) {
                let cardTitle = cards[i].querySelector("p").innerText;
                if (cardTitle === productName) {
                    cards[i].querySelectorAll("p")[1].innerText = `‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${newStock}${unit ? ' ' + unit : ''}`;
                    break;
                }
            }

            modal.setAttribute("data-stock", newStock);
            modal.style.display = "none";
        }

        // Plus/minus buttons for quantity input
        $(".btn-plus").on("click", function(e) {
            e.preventDefault();
            let inputField = $(this).closest('.quantity-wrapper').find('input[name="quantity"]');
            let currentVal = parseInt(inputField.val(), 10);

            if (!isNaN(currentVal)) {
                inputField.val(currentVal + 1);
            }
        });

        $(".btn-minus").on("click", function(e) {
            e.preventDefault();
            let inputField = $(this).closest('.quantity-wrapper').find('input[name="quantity"]');
            let currentVal = parseInt(inputField.val(), 10);

            if (!isNaN(currentVal) && currentVal > 1) {
                inputField.val(currentVal - 1);
            }
        });
    </script>

</body>
</html>